filter {
  grok {
    patterns_dir => ["/opt/logstash/extra_patterns"]
    match => { "message" => "%{TIMESTAMP_JP:[@metadata][read_timestamp]}" }
  }

  grok {
    match => { "message" => "Mode,%{WORD:Mode}"}
  }

  grok {
    match => { "message" => "\nTesterName,%{WORD:TesterName}"}
  }

  grok {
    match => { "message" => "Result,%{WORD:Result}" }
  }

  date {
    match => ["[@metadata][read_timestamp]", "yyyy/MM/dd,HH:mm:ss"]
    timezone => "Asia/Tokyo"
    target => "@timestamp"
  }

  mutate {
      add_field => { "lc_custom_id" => "%{TesterName}-%{Mode}" }
  }

  mutate {
    copy => { "message" => "[@metadata][original-message]"}
  }

  # ruby {
  #   code => '
  #     message = event.get("message")
  #     lines = message.split("\n")
  #     lines.each do |line|
  #       items = line.split(",")
  #       if items[0] !~ /\d+/
  #         next
  #       end
  #       itemsHash = { "Step" => items[0], "TstName" => items[1], "LoLimit" => items[2], "Data" => items[3] , "UpLimit" => items[4] , "Unit" => items[5] , "Judge" => items[6] }
  #       event.set("[data][#{items[0]}]", itemsHash)
  #     end
  #   '
  # }

  split{}

  csv {
    columns => ["Step","TstName","LoLimit","Data","UpLimit","Unit","Judge"]
    separator => ","
  }

  if [Step] == "END" {
    # counter
  }else if [Step] !~ /\d+/{
    drop{}
  }

  mutate {
    copy => { 
      "LoLimit" => "LoLimitInt"
      "Data" => "DataInt"
      "UpLimit" => "UpLimitInt"
    }
  }

  if [Unit] == "HEX" {
    ruby {
        code => '
          event.set("LoLimitInt", event.get("LoLimit").to_i(16))
          event.set("DataInt", event.get("Data").to_i(16))
          event.set("UpLimitInt", event.get("UpLimit").to_i(16))
        '
    }
  }else{
    mutate {
      convert => {
        "LoLimitInt" => "float"
        "DataInt" => "float"
        "UpLimitInt" => "float"
      }
    }
  }

  mutate {
      add_field => { "[@metadata][fingerprint-message]" => "%{[@metadata][original-message]}-%{message}" }
  }

  fingerprint {
    source => "[@metadata][fingerprint-message]"
    target => "[@metadata][fingerprint]"
    method => "MD5"
    key => "test"
  }
  
  ruby { code => 'event.set("[@metadata][prefix]", event.get("@timestamp").to_i.to_s(16))' }

  # mutate {
  #   remove_field => ["read_timestamp", "message"]
  # }
}
